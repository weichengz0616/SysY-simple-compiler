decl @getint(): i32
decl @getch(): i32
decl @getarray(*i32): i32
decl @putint(i32)
decl @putch(i32)
decl @putarray(i32, *i32)
decl @starttime()
decl @stoptime()

fun @add(%a_1: i32, %b_1: i32): i32
{
%entry:
	@a_1= alloc i32
	store %a_1 , @a_1
	@b_1= alloc i32
	store %b_1 , @b_1
	%0 = load @a_1
	%1 = load @b_1
	%2 = add %0, %1
	ret %2
}

fun @sub(%a_3: i32, %b_3: i32): i32
{
%entry:
	@a_3= alloc i32
	store %a_3 , @a_3
	@b_3= alloc i32
	store %b_3 , @b_3
	%3 = load @a_3
	%4 = load @b_3
	%5 = sub %3, %4
	ret %5
}

fun @mul(%a_5: i32, %b_5: i32): i32
{
%entry:
	@a_5= alloc i32
	store %a_5 , @a_5
	@b_5= alloc i32
	store %b_5 , @b_5
	%6 = load @b_5
	%7 = load @a_5
	%8 = mul %7, %6
	ret %8
}

fun @div(%a_7: i32, %b_7: i32): i32
{
%entry:
	@a_7= alloc i32
	store %a_7 , @a_7
	@b_7= alloc i32
	store %b_7 , @b_7
	%9 = load @b_7
	%10 = load @a_7
	%11 = div %10, %9
	ret %11
}

fun @main(): i32
{
%entry:
	@x_10= alloc i32
	%12 = call @sub(1, 2)
	%13 = call @div(4, 5)
	%14 = call @mul(3, %13)
	%15 = call @add(%12, %14)
	store %15 , @x_10
	@y_10= alloc i32
	%16 = ne 1, 0
	%17 = ne 0, 0
	%18 = or %17, %16
	%19 = load @x_10
	%20 = call @sub(1, %19)
	%21 = ne 0, 0
	%22 = ne %20, 0
	%23 = and %22, %21
	%24 = load @x_10
	%25 = call @add(1, 2)
	%26 = gt %25, 10
	%27 = ne %24, 0
	%28 = ne %26, 0
	%29 = or %28, %27
	%30 = call @div(%29, 5)
	%31 = call @mul(3, %30)
	%32 = ne %23, 0
	%33 = ne %31, 0
	%34 = or %33, %32
	%35 = call @add(%18, %34)
	store %35 , @y_10
	%36 = load @x_10
	%37 = load @y_10
	%38 = add %36, %37
	ret %38
}

